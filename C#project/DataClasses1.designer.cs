#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gifting_System
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GiftingSystem_Database")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBuyer(Buyer instance);
    partial void UpdateBuyer(Buyer instance);
    partial void DeleteBuyer(Buyer instance);
    partial void InsertSeller(Seller instance);
    partial void UpdateSeller(Seller instance);
    partial void DeleteSeller(Seller instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Gifting_System.Properties.Settings.Default.GiftingSystem_DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Buyer> Buyers
		{
			get
			{
				return this.GetTable<Buyer>();
			}
		}
		
		public System.Data.Linq.Table<Seller> Sellers
		{
			get
			{
				return this.GetTable<Seller>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Buyer")]
	public partial class Buyer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _B_username;
		
		private string _B_password;
		
		private int _B_phone;
		
		private int _B_spendinglimit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnB_usernameChanging(string value);
    partial void OnB_usernameChanged();
    partial void OnB_passwordChanging(string value);
    partial void OnB_passwordChanged();
    partial void OnB_phoneChanging(int value);
    partial void OnB_phoneChanged();
    partial void OnB_spendinglimitChanging(int value);
    partial void OnB_spendinglimitChanged();
    #endregion
		
		public Buyer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string B_username
		{
			get
			{
				return this._B_username;
			}
			set
			{
				if ((this._B_username != value))
				{
					this.OnB_usernameChanging(value);
					this.SendPropertyChanging();
					this._B_username = value;
					this.SendPropertyChanged("B_username");
					this.OnB_usernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string B_password
		{
			get
			{
				return this._B_password;
			}
			set
			{
				if ((this._B_password != value))
				{
					this.OnB_passwordChanging(value);
					this.SendPropertyChanging();
					this._B_password = value;
					this.SendPropertyChanged("B_password");
					this.OnB_passwordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_phone", DbType="Int NOT NULL")]
		public int B_phone
		{
			get
			{
				return this._B_phone;
			}
			set
			{
				if ((this._B_phone != value))
				{
					this.OnB_phoneChanging(value);
					this.SendPropertyChanging();
					this._B_phone = value;
					this.SendPropertyChanged("B_phone");
					this.OnB_phoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_spendinglimit", DbType="Int NOT NULL")]
		public int B_spendinglimit
		{
			get
			{
				return this._B_spendinglimit;
			}
			set
			{
				if ((this._B_spendinglimit != value))
				{
					this.OnB_spendinglimitChanging(value);
					this.SendPropertyChanging();
					this._B_spendinglimit = value;
					this.SendPropertyChanged("B_spendinglimit");
					this.OnB_spendinglimitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seller")]
	public partial class Seller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _S_username;
		
		private string _S_password;
		
		private int _S_phone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnS_usernameChanging(string value);
    partial void OnS_usernameChanged();
    partial void OnS_passwordChanging(string value);
    partial void OnS_passwordChanged();
    partial void OnS_phoneChanging(int value);
    partial void OnS_phoneChanged();
    #endregion
		
		public Seller()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string S_username
		{
			get
			{
				return this._S_username;
			}
			set
			{
				if ((this._S_username != value))
				{
					this.OnS_usernameChanging(value);
					this.SendPropertyChanging();
					this._S_username = value;
					this.SendPropertyChanged("S_username");
					this.OnS_usernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string S_password
		{
			get
			{
				return this._S_password;
			}
			set
			{
				if ((this._S_password != value))
				{
					this.OnS_passwordChanging(value);
					this.SendPropertyChanging();
					this._S_password = value;
					this.SendPropertyChanged("S_password");
					this.OnS_passwordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_phone", DbType="Int NOT NULL")]
		public int S_phone
		{
			get
			{
				return this._S_phone;
			}
			set
			{
				if ((this._S_phone != value))
				{
					this.OnS_phoneChanging(value);
					this.SendPropertyChanging();
					this._S_phone = value;
					this.SendPropertyChanged("S_phone");
					this.OnS_phoneChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
